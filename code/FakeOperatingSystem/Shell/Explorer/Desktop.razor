@using System;
@using FakeOperatingSystem.OSFileSystem
@using FakeOperatingSystem.Shell
@using Sandbox;
@using Sandbox.UI;
@using XGUI;
@using FakeDesktop;
@using FakeOperatingSystem;
@attribute [StyleSheet("Desktop.razor.scss")]
@inherits XGUIPanel

<root>
	<virtualfilebrowserview @ref=BrowserView class="browser-view" style="width:70%"></virtualfilebrowserview>
	@{
		BrowserView.ListView.ItemContainer.Style.FlexDirection = FlexDirection.Column;
	}
</root>

@code {
	private VirtualFileBrowserView BrowserView;

	protected override void OnAfterTreeRender(bool firstTime)
	{
		base.OnAfterTreeRender(firstTime);

		// Can Navigate is set to false to prevent navigation within the browser view
		BrowserView.CanNavigate = false;
		if (firstTime)
		{
			BrowserView.DefaultDirection = FlexDirection.Column;
			BrowserView.AutoArrangeIcons = false;
			BrowserView.IconPositionsFileName = ".iconpositions_desktop";

			// Initialize browser view with virtual file system
			BrowserView.Initialize(VirtualFileSystem.Instance, ShellNamespace.Instance, FileSystem.Data);

			// Set default view mode
			BrowserView.ViewMode = FileBrowserViewMode.Icons;

			// Navigate to Desktop - this will stay fixed
			BrowserView.NavigateToShellPath(ShellNamespace.DESKTOP, sound: false);
		}
	}

	private void LaunchExplorerWithPath(string virtualPath)
	{
		// Launch the Explorer application with the specified virtual path
		ProcessManager.Instance.OpenExecutable("C:\\Windows\\explorer.exe", new Win32LaunchOptions()
		{
			Arguments = $"{virtualPath}",
		});
	}
}
