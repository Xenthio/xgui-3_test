@using Sandbox;
@using System.Collections.Generic;
@using Sandbox.UI;
@using System.Linq;
@using XGUI;
@inherits Window

<root title="Global Style Picker" hasminimise="true" hasmaximise="true" x="540" y="140" width="350px" height="140px">
	<div class="window-content">
		<div class="margin column">
			<label>Select Global Theme:</label>
			<combobox default=@(StyleName) @ref="ThemeComboBox">
				@foreach (string i in GetAllThemes())
				{
					<option value="combo">@i.Replace(".scss", "")</option>
				}
			</combobox>
			<div class="button-row" style="margin-top:6px;">
				<button @onclick=@ApplyToAllWindows style="margin-right:6px;">Apply to All Windows</button>
				<button @onclick=@SaveAsDefault style="margin-right:6px;">Save as Default</button>
			</div>
		</div>
		<resizer></resizer>
	</div>
</root>

@code {

	private ComboBox ThemeComboBox;
	private StyleSheet CurrentStyle;
	public string StyleName = "OliveGreen";
	private int Loaded = 0;

	List<string> GetAllThemes()
	{
		var themes = new List<string>();
		var defaultThemes = new List<string>()
		{
			"Computer11.scss",
			"Computer7.scss",
			"Computer95.scss",
			"ComputerXP.scss",
			"Derma.scss",
			"DermaBkup.scss",
			"IMGUI.scss",
			"OliveGreen.scss",
			"SboxDark.scss",
			"Simple.scss",
			"ThinGrey.scss",
			"Vapour.scss",
			"XGUI.scss"
		};
		var themeFiles = FileSystem.Mounted.FindFile("/XGUI/DefaultStyles/", "*.scss");

		var themelistasstring = "";

		// Add default themes, then add any custom themes (dont add duplicates)
		themes.AddRange(defaultThemes);
		foreach (var file in themeFiles)
		{
			if (!themes.Contains(file))
			{
				themes.Add(file);
			}
			themelistasstring += $"\"{file}\",\n";
		}

		//Log.Info($"{themelistasstring}");

		return themes;
	}

	public override void Tick()
	{
		base.Tick();
		if (Loaded == 0)
		{
			Loaded++;
			Style.ZIndex = 100;
			ApplyStyle(StyleName); // Apply style to this window

			if (ThemeComboBox != null)
			{
				ThemeComboBox.ValueChanged = ThemeChanged;
			}
		}
		if (ThemeComboBox != null && ThemeComboBox.ValueChanged == null)
		{
			ThemeComboBox.ValueChanged = ThemeChanged;
		}
	}

	public void ThemeChanged(string styleName)
	{
		StyleName = styleName;
		ApplyStyle(styleName); // Apply to self first for preview
	}

	private void ApplyStyle(string styleName)
	{
		StyleSheet.Remove("*");
		CurrentStyle = Sandbox.UI.StyleSheet.FromFile($"/XGUI/DefaultStyles/{styleName}.scss");
		StyleSheet.Add(CurrentStyle);
		Loaded++;
	}

	private void ApplyToAllWindows()
	{
		var guiSystem = Scene.GetSystem<XGUISystem>();
		if (guiSystem == null || guiSystem.Panel == null)
		{
			Log.Warning("XGUI System not found");
			return;
		} 

		guiSystem.SetGlobalTheme($"/XGUI/DefaultStyles/{StyleName}.scss");

		Log.Info($"Applied style '{StyleName}' to all windows");
	}

	private void ForceStyleUpdateRecursive(Panel panel)
	{
		// Mark this panel's style as dirty to force recalculation
		panel.Style.Dirty();

		// Update all immediate children
		foreach (var child in panel.Children)
		{
			if (child == null || !child.IsValid()) continue;

			// Mark the child's style as dirty
			child.Style.Dirty();

			// Recursively update this child's children
			ForceStyleUpdateRecursive(child);
		}
	}

	private void SaveAsDefault()
	{
		// In a real application, you would save this setting to a configuration file
		// For now, we'll just log it
		Log.Info($"Set '{StyleName}' as default style (not persisted between sessions)");

		// This is where you would save to a configuration or cookie
		// Example: Cookie.Set("default_xgui_style", StyleName);
	}

	protected override int BuildHash()
	{
		return System.HashCode.Combine(Loaded);
	}
}